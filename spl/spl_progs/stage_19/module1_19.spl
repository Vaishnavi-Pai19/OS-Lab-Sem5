// Exit Process + Free User Area Page + Free Page Table

alias functionNum R1;
alias currentPID R2;

// ------------------------------------- Free User Area Page ------------------------------------------------------ //
if (functionNum == 2) then
   alias userAreaPage R3;
   userAreaPage = [PROCESS_TABLE + currentPID*16 + 11];
   multipush (R1, R2, R3);
   R1 = 2;        // Release page
   R2 = userAreaPage;
   call MEMORY_MANAGER;
   multipop (R1, R2, R3);
   return;
endif;

// ------------------------------------- Exit Process ------------------------------------------------------------- //
if (functionNum == 3) then
   multipush (R1, R2);
   R1 = 4;      // Free page table
   R2 = currentPID;
   call PROCESS_MANAGER;
   R1 = 2;      // Free user area page
   R2 = currentPID;
   call PROCESS_MANAGER;
   multipop (R1, R2);

   [PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
   return;
endif;

//  ------------------------------------ Free Page Table --------------------------------------------------------- //
if (functionNum == 4) then
   // Invalidating library pages by setting to -1 and 0000
   [PAGE_TABLE_BASE + currentPID*20 + 0] = -1;
   [PAGE_TABLE_BASE + currentPID*20 + 1] = "0000";
   [PAGE_TABLE_BASE + currentPID*20 + 2] = -1;
   [PAGE_TABLE_BASE + currentPID*20 + 3] = "0000";
   
   // Calling Release page for each valid entry
   alias i R3;
   i = 4;
   while (i < 20) do
      alias ptbr R4;      // IMPORTANT: PTBR != ptbr
      ptbr = PAGE_TABLE_BASE + currentPID*20;
      if ([ptbr + i] != -1) then
         multipush (R1, R2, R3, R4);
         R1 = 2;
         R2 = [ptbr + i];
         call MEMORY_MANAGER;
         multipop (R1, R2, R3, R4);
        
         [ptbr + i] = -1;
         [ptbr + i + 1] = "0000";
       endif;
       i = i+2;
   endwhile;
   
   alias diskEntry R4;
   diskEntry = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10;          // Disk map table start of current process
   i = 0; 
   while (i < 10) do
      if (i == 2 || i == 3 || i == 8 || i == 9) then                 // Checking the heap and stack entries
         // breakpoint;
         if ([diskEntry + i] != -1) then
            multipush (R1, R2, R3, R4, R5);
            R1 = 1;
            R2 = [diskEntry + i];
            call MEMORY_MANAGER;             // Release block
            multipop (R1, R2, R3, R4, R5);
         endif;
         [diskEntry + i] = -1;
      endif;
      i = i+1;
   endwhile;   
return;
endif;
