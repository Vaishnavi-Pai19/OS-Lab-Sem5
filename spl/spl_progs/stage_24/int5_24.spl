alias userSP R1;
userSP = SP;

alias pTable R2;
pTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;
[pTable + 13] = userSP;
SP = [pTable + 11]*512 - 1;

alias sysCallNum R3;
sysCallNum = [[PTBR + ((userSP-5)/512)*2]*512 + (userSP-5)%512];

alias returnVal R4;
returnVal = [PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512;
[pTable + 9] = sysCallNum;

// ------------------------------------------------------------ Open -------------------------------------------------------------------- //
if (sysCallNum == 2) then
   // Finding free per process table entry
   alias i R5;
   i = 0;
   alias resourceTable R6;
   resourceTable = [pTable + 11]*512 + RESOURCE_TABLE_OFFSET;
   while (i < 8) do
      if ([resourceTable + i*2 + 0] == -1) then
         break;
      endif;
      i = i+1;
   endwhile;
   
   // If no free entries, returning - 3 to indicate
   if (i == 8) then
      [returnVal] = -3;
   else
      alias fileName R7;
      fileName = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
      alias fileTableEntry R8;

      // Getting the Open File Table entry
      multipush (R0, R1, R2, R3, R4, R5, R6, R7);
      R1 = 3;
      R2 = fileName;
      call FILE_MANAGER;
      fileTableEntry = R0;
      multipop (R0, R1, R2, R3, R4, R5, R6, R7);
      
      // If Open() failes, returning error code (either -1 or -2)
      if (fileTableEntry == -1) then
         [returnVal] = fileTableEntry;
      else
         // Updating the per process resource table
         [resourceTable + i*2 + 0] = FILE;
         [resourceTable + i*2 + 1] = fileTableEntry;
         [returnVal] = i;
      endif;
   endif;
endif;

// ------------------------------------------------------------ Close ------------------------------------------------------------------- //
if (sysCallNum == 3) then
   alias fileDesc R5;
   fileDesc = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
   if (fileDesc < 0 || fileDesc > 7) then
      [returnVal] = -1;
   else
      alias resourceTable R6;
      resourceTable = [pTable + 11]*512 + RESOURCE_TABLE_OFFSET;
      
      if ([resourceTable + 0] != FILE) then
         [returnVal] = -1;
      else
         alias fileTableEntry R7;
         fileTableEntry = [resourceTable + 1];

         multipush (R0, R1, R2, R3, R4, R5, R6, R7);
         R1 = 4;
         R2 = fileTableEntry;
         call FILE_MANAGER;
         multipop (R0, R1, R2, R3, R4, R5, R6, R7);

         [resourceTable + 0] = -1;
         [returnVal] = 0;
      endif;
   endif;
endif;

[pTable + 9] = 0;
SP = userSP;
ireturn;
