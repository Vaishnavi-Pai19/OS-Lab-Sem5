// Setting MODE flag of current process to 7 for READ
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 7;

// Saving value of register SP as userSP
alias userSP R0;
userSP = SP;

// Saving value of register SP in the UPTR field of current process
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;

// Intializing SP (=kernel stack pointer now) 
SP = ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11])*512 -1;

// Retrieving file descriptor from userSP - 4
alias physicalPageNo R1;
alias offset R2;
alias fileDescPhysAddr R3;
alias fileDesc R4;

physicalPageNo = [PTBR + 2 * ((userSP - 4)/512)];   // Arg 1 contains file desc>
offset = (userSP - 4) % 512;
fileDescPhysAddr = (physicalPageNo * 512) + offset;
fileDesc = [fileDescPhysAddr];

// Calculating return address in user stack
alias physAddrRetVal R5;
physAddrRetVal = ([PTBR + 2 * ((userSP-1)/512)]*512) + ((userSP-1)%512);

if (fileDesc == -1) then                        // If input to be read from terminal
   // Retrieving word address from user stack
   alias wordAddr R6;
   wordAddr = [([PTBR + 2 * ((userSP-3)/512)]*512) + ((userSP-3)%512)];
   // for debugging, print "Hi";
  
   multipush (R0, R1, R2, R3, R4, R5, R6);
   R1 = 4;                          // Function no. for Terminal Read
   R2 = [SYSTEM_STATUS_TABLE+1];   // Current PID
   R3 = wordAddr;                  // Word address for word to be read
   call MOD_4;                     // No return value for Terminal Read
   multipop (R0, R1, R2, R3, R4, R5, R6);
   [physAddrRetVal] = 0;
else
   if (fileDesc < 0 || fileDesc > 7) then
      [physAddrRetVal] = -1;
   else
      alias resourceTableEntry R6;
      resourceTableEntry = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 + RESOURCE_TABLE_OFFSET + fileDesc*2;

      if ([resourceTableEntry + 0] != FILE) then
         [physAddrRetVal] = -1;
      else
         alias inodeIndex R7;
         alias openFile R8;

         openFile = [resourceTableEntry + 1];
         inodeIndex = [OPEN_FILE_TABLE + openFile*4 + 0];

         multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
         R1 = 4;                     // Calling Acquire inode
         R2 = inodeIndex;
         R3 = [SYSTEM_STATUS_TABLE+1];
         call RESOURCE_MANAGER;
         R9 = R0;
         multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

         if (R9 == -1) then
            [physAddrRetVal] = -1;
         else
            alias LSEEK R9;
            LSEEK = OPEN_FILE_TABLE + openFile*4 + 2;
            alias wordAddress R10;

            // Getting the physical address corresponding to the logical address
            wordAddress = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];
            wordAddress = [PTBR + 2*(wordAddress/512)]*512 + (wordAddress%512);

            if (inodeIndex == INODE_ROOT) then
               if ([LSEEK] == 480) then 
                  multipush (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);
                  R1 = 5;
                  R2 = inodeIndex;
                  R3 = [SYSTEM_STATUS_TABLE+1];
                  call RESOURCE_MANAGER;
                  multipop (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);

                  [physAddrRetVal] = -2;
                  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 9] = 0;
                  SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13];
                  ireturn;
               endif;

               [wordAddress] = [ROOT_FILE + [LSEEK]];
               [LSEEK] = [LSEEK] + 1;

            else
               if ([LSEEK] == [INODE_TABLE + inodeIndex*16 + 2]) then
                  multipush (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);
                  R1 = 5;
                  R2 = inodeIndex;
                  R3 = [SYSTEM_STATUS_TABLE+1];
                  call RESOURCE_MANAGER;
                  multipop (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);

                  [physAddrRetVal] = -2;
                  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 9] = 0;
                  SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13];
                  ireturn;
               endif;

               alias diskBlock R11;
               alias offset R12;
               diskBlock = [INODE_TABLE + inodeIndex*16 + 8 + ([LSEEK]/512)];
               offset =  ([LSEEK]%512);
               multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);
               R1 = 2;                              // Buffered read
               R2 = diskBlock;
               R3 = offset;
               R4 = wordAddress;
               call FILE_MANAGER;                                
               multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);

               [LSEEK] = [LSEEK] + 1;
               [physAddrRetVal] = 0;
            endif;
         endif;

         // Releasing lock by calling Release inode
         multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);
         R1 = 5;
         R2 = inodeIndex;
         R3 = [SYSTEM_STATUS_TABLE+1];
         call RESOURCE_MANAGER;
         multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);
         [physAddrRetVal] = 0;
      endif;
   endif;
endif;


[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
SP = userSP;
ireturn;