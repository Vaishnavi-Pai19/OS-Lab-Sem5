[SYSTEM_STATUS_TABLE + 7]=[SYSTEM_STATUS_TABLE + 7]+1;
// Setting MODE flag of current process to 7 for READ
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 7;

// Saving value of register SP as userSP
alias userSP R0;
userSP = SP;

// Saving value of register SP in the UPTR field of current process
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;

// Intializing SP (=kernel stack pointer now) 
SP = ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11])*512 -1;

// Retrieving file descriptor from userSP - 4
alias physicalPageNo R1;
alias offset R2;
alias fileDescPhysAddr R3;
alias fileDesc R4;

physicalPageNo = [PTBR + 2 * ((userSP - 4)/512)];   // Arg 1 contains file desc>
offset = (userSP - 4) % 512;
fileDescPhysAddr = (physicalPageNo * 512) + offset;
fileDesc = [fileDescPhysAddr];

// Calculating return address in user stack
alias physAddrRetVal R5;
physAddrRetVal = ([PTBR + 2 * ((userSP-1)/512)]*512) + ((userSP-1)%512);

if (fileDesc == -1) then
   // Retrieving word address from user stack
   alias wordAddr R6;
   wordAddr = [([PTBR + 2 * ((userSP-3)/512)]*512) + ((userSP-3)%512)];
   // for debugging, print "Hi";
  
   multipush (R0, R1, R2, R3, R4, R5, R6);
   R1 = 4;                          // Function no. for Terminal Read
   R2 = [SYSTEM_STATUS_TABLE+1];   // Current PID
   R3 = wordAddr;                  // Word address for word to be read
   call MOD_4;                     // No return value for Terminal Read

   multipop (R0, R1, R2, R3, R4, R5, R6);
   [physAddrRetVal] = 0;

else
   // Storing -1 as return value in user stack
   [physAddrRetVal] = -1;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
SP = userSP;
ireturn;
