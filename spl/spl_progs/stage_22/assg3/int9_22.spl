[SYSTEM_STATUS_TABLE + 7]=[SYSTEM_STATUS_TABLE + 7]+1;
// Exec system call number = 9, interrupt routine 9

// Saving user stack value for later use
alias userSP R0;
userSP = SP;
// print R0;

// User to Kernel Stack
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 -1;

// MODE flag to system call of Exec
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 9;

// Getting argument (name of file) from user stack
alias fileName R1;
fileName = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP - 4)%512];
// print fileName;

// Searching inode table for the file
alias i R4;
alias inodeIndex R5;
i = 0;
inodeIndex = -1;
while (i < MAX_FILE_NUM) do
   if ([INODE_TABLE + i*16 + 1] == fileName) then       // Checking if file name matches
      if ([INODE_TABLE + i*16] == EXEC) then            // Checking if file in XEXE format
         inodeIndex = i;
      endif;
      break;
   endif;
   i = i+1;
endwhile;

// print "inode";
// print inodeIndex;

// Indicating failure
if (inodeIndex == -1) then                              // Does not exist in inode table
   [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;           // Changing MODE to User
   [[PTBR + 2*((userSP - 1)/512)]*512 + ((userSP - 1)%512)] = -1;    // -1 in return value      
   SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];         // Resetting stack pointer
   ireturn;                                                          // Returning to user mode
endif;

// Calling Exit process
multipush (R0, R1, R2, R3, R4, R5);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;
multipop (R0, R1, R2, R3, R4, R5);

// print "exit done";

// Reclaiming User Area Page from Process Table of current process
alias userAreaPageNo R6;
userAreaPageNo = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11];
[MEMORY_FREE_LIST + userAreaPageNo] = 1;                     // Reclaiming page
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2]-1;     // Decrementing the MEM_FREE_COUNT field

// Initializing the kernel stack of new process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 - 1;   // SP to the top of User Page Area
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 4] = RUNNING;       // New process uses PID of terminated process
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 7] = inodeIndex;    // Updating inode index of process table

// Allocating new pages and setting page table entries for new process
PTBR = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 14];

// Library pages - read only
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Invalidate all heap pages
[PTBR+4]  = -1;
[PTBR+5]  = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

multipush (R0, R1, R2, R3, R4, R5, R6, PTBR);
R1 = 1;       // Get 2 free pages for stack
call MEMORY_MANAGER;
[PTBR+16] = R0;
[PTBR+17] = "0110";
R1 = 1;
call MEMORY_MANAGER;
[PTBR+18] = R0;
[PTBR+19] = "0110";
multipop (R0, R1, R2, R3, R4, R5, R6, PTBR);

// print "stack done";

multipush (R0, R1, R2, R3, R4, R5, R6, R7, PTBR);
R1 = 5;                                           // Get code page
R2 = [INODE_TABLE + (inodeIndex*16) + 8];
// print "block";
// print R2;
R3 = [SYSTEM_STATUS_TABLE+1];
call MEMORY_MANAGER;
// print R0;
[PTBR + 8] = R0;
[PTBR + 9] = "0110";
multipop (R0, R1, R2, R3, R4, R5, R6, R7, PTBR);

// print "code done";

[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// Initializing disk map table
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 0] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 1] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;                                          // 2 for Heap
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = [INODE_TABLE + (inodeIndex * 16) + 8 + 0];   // 4 for Code
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = [INODE_TABLE + (inodeIndex * 16) + 8 + 1];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = [INODE_TABLE + (inodeIndex * 16) + 8 + 2];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = [INODE_TABLE + (inodeIndex * 16) + 8 + 3]; 
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;                                          // 2 for Stack
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;

// Storing entry point IP to top of user stack
[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];
SP = 8*512;      // SP back to user stack

// MODE flag back to user mode and returning to user mode
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
ireturn;
