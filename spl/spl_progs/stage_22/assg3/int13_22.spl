[SYSTEM_STATUS_TABLE + 7]=[SYSTEM_STATUS_TABLE + 7]+1;
alias userSP R1;
userSP = SP;

// Switching to kernel stack
alias pTable R2;
pTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;
[pTable + 13] = userSP;
SP = [pTable + 11]*512 - 1;

// Extracting system call no. from user stack
alias sysCallNum R3;
sysCallNum = [[PTBR + 2*((userSP-5)/512)]*512 + (userSP-5)%512];
[pTable + 9] = sysCallNum;

// -------------------------------------------- Semget - Syscall no. 17 ------------------------------------------------------------------- //
if (sysCallNum == 17) then
   // Finding free entry in Per Process Resource Table to be SEMID
   alias i R4;
   i = 0;
   while (i < 8) do
      if ([[pTable + 11]*512 + RESOURCE_TABLE_OFFSET + i*2] == -1) then
         break;
      endif;
      i = i+1;
   endwhile;

   if (i == 8) then
      [[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;          // Returning -1 in case of failure
   else
      multipush (R1, R2, R3, R4);
      R1 = 6;                //  Acquire semaphore
      R2 = [SYSTEM_STATUS_TABLE + 1];
      call RESOURCE_MANAGER;
      multipop (R1, R2, R3, R4);
   
      if (R0 == -2) then    // -2 returned if no free semaphores
         [[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -2;
      else 
         // Storing index of Semaphore table entry in Resource Table
         [[pTable + 11]*512 + RESOURCE_TABLE_OFFSET + i*2] = 1;           // Resource Identifier = 1 for Semaphore
         [[pTable + 11]*512 + RESOURCE_TABLE_OFFSET + i*2 + 1] = R0;      // Sempahore table index 
         [[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = i;          // Returning index of newly created entry in per-process resource table as SEMID
      endif;
   endif;
endif;

// -------------------------------------------- Semrelease - Syscall no. 18 --------------------------------------------------------------- //
if (sysCallNum == 18) then
   // Extracting Semaphore ID 
   alias semID R4;
   semID = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];
   if (semID < 0 || semID > 7 || [[pTable + 11]*512 + RESOURCE_TABLE_OFFSET + 2*semID] != 1) then      // If descriptor not valid, returning -1
      [[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;
   else
      multipush (R1, R2, R3, R4);
      R1 = 7;
      R2 = [[pTable + 11]*512 + RESOURCE_TABLE_OFFSET + 2*semID + 1];       // Semaphore Table Index
      // print "Release";
      // print R2;
      R3 = [SYSTEM_STATUS_TABLE + 1];
      call RESOURCE_MANAGER;
      multipop (R1, R2, R3, R4);

      // Invalidating the per-process resource table entry
      [[pTable + 11]*512 + RESOURCE_TABLE_OFFSET + 2*semID] = -1;
      [[pTable + 11]*512 + RESOURCE_TABLE_OFFSET + 2*semID + 1] = -1;
      [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = 0;
   endif;
endif;

// Switching back to user stack and returning to user mode
[pTable + 9] = 0;
SP = [pTable + 13];
ireturn;