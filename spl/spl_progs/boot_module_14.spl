// Boot module is used for OS initialization so here INIT process is scheduled

// Library code
loadi (63, 13);
loadi (64, 14);

// Exception handler
loadi (2, 15);
loadi (3, 16);

// Timer interrupt routine
loadi (4, 17);
loadi (5, 18);

// INT 7 
loadi (16, 29);
loadi (17, 30);

// INT 10
loadi (22, 35);
loadi (23, 36);

// INIT process
loadi (65, 7);
loadi (66, 8);

// Loading Even Nos. from disk block 70 to memory
loadi (87, 70);

// MODULE 5 - Scheduler
loadi (50, 63);
loadi (51, 64);

// Odd Numbers Program is INIT process here

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Process table for INIT starts from PT + 16
[PROCESS_TABLE + 16 + 1] = 1;             // PID
[PROCESS_TABLE + 16 + 4] = CREATED;       // INIT is not scheduled first
[PROCESS_TABLE + 16 + 11] = 80;           // User Area Page
[PROCESS_TABLE + 16 + 12] = 0;            // KPTR
[PROCESS_TABLE + 16 + 13] = 8*512;        // UPTR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

[76*512] = [65*512 + 1];  

// Even Numbers Program as process with PID = 2

PTBR = PAGE_TABLE_BASE + 2*20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap (Pages 85 and 86)
[PTBR+4] = 85;
[PTBR+5] = "0110";
[PTBR+6] = 86;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 87;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack (Pages 83 and 84)
[PTBR+16] = 83;
[PTBR+17] = "0110";
[PTBR+18] = 84;
[PTBR+19] = "0110";

// Process table for second process starts from PT + 32
[PROCESS_TABLE + 32 + 1] = 2;             // PID
[PROCESS_TABLE + 32 + 4] = CREATED;       
[PROCESS_TABLE + 32 + 11] = 88;           // User Area Page
[PROCESS_TABLE + 32 + 12] = 0;            // KPTR
[PROCESS_TABLE + 32 + 13] = 8*512;        // UPTR Logical Address
[PROCESS_TABLE + 32 + 14] = PAGE_TABLE_BASE + 40;
[PROCESS_TABLE + 32 + 15] = 10;

[83*512] = [87*512 + 1];                  // Entry point value for new process

// Initializing STATE field of all other processes (13) as TERMINATED
[PROCESS_TABLE + 3*16 + 4] = TERMINATED;
[PROCESS_TABLE + 4*16 + 4] = TERMINATED;
[PROCESS_TABLE + 5*16 + 4] = TERMINATED;
[PROCESS_TABLE + 6*16 + 4] = TERMINATED;
[PROCESS_TABLE + 7*16 + 4] = TERMINATED;
[PROCESS_TABLE + 8*16 + 4] = TERMINATED;
[PROCESS_TABLE + 9*16 + 4] = TERMINATED;
[PROCESS_TABLE + 10*16 + 4] = TERMINATED;
[PROCESS_TABLE + 11*16 + 4] = TERMINATED;
[PROCESS_TABLE + 12*16 + 4] = TERMINATED;
[PROCESS_TABLE + 13*16 + 4] = TERMINATED;
[PROCESS_TABLE + 14*16 + 4] = TERMINATED;
[PROCESS_TABLE + 15*16 + 4] = TERMINATED;

return;                                   // Not ireturn since it has to go to caller not user mode
